{"version":3,"sources":["componentes/ExpenseItem.js","componentes/ExpenseList.js","componentes/ExpenseForm.js","componentes/Alert.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseItem","expense","handleEdit","handleDelete","id","charge","amount","className","aria-label","onClick","ExpenseList","expenses","clearItems","map","key","length","ExpenseForm","handleCharge","handleAmount","handleSubmit","onSubmit","htmlFor","type","name","placeholder","value","onChange","Alert","text","App","initialExpenses","uuid","useState","setExpenses","setCharge","setAmount","show","alert","setAlert","handleAlert","setTimeout","e","target","preventDefault","singleExpense","tempExpenses","filter","item","console","log","reduce","acc","curr","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6OAkBeA,EAhBK,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,WAAYC,EAAkB,EAAlBA,aAChCC,EAAsBH,EAAtBG,GAAIC,EAAkBJ,EAAlBI,OAAQC,EAAUL,EAAVK,OACnB,OACI,wBAAIC,UAAU,QACV,yBAAKA,UAAU,QACZ,0BAAMA,UAAU,WAAWF,GAC3B,0BAAME,UAAU,UAAhB,IAA2BD,IAE9B,6BACI,4BAAQC,UAAU,WAAWC,aAAW,cAAcC,QAAS,kBAAIP,EAAWE,KAAK,kBAAC,IAAD,OACnF,4BAAQG,UAAU,YAAYC,aAAW,gBAAgBC,QAAS,kBAAIN,EAAaC,KAAK,kBAAC,IAAD,UCWzFM,EApBK,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,SAAUT,EAAyC,EAAzCA,WAAWC,EAA8B,EAA9BA,aAAcS,EAAgB,EAAhBA,WACrD,OACI,oCACC,wBAAIL,UAAU,QACVI,EAASE,KAAI,SAAAZ,GACV,OAAO,kBAAC,EAAD,CAAMa,IAAKb,EAAQG,GAAIH,QAASA,EAASC,WAAYA,EAAYC,aAAgBA,QAI3FQ,EAASI,OAAS,GACd,4BAAQR,UAAU,MAAME,QAAWG,GAAnC,iBAEI,kBAAC,IAAD,CAAUL,UAAU,gBC4B1BS,EAzCK,SAAC,GAMd,IALHX,EAKE,EALFA,OACAC,EAIE,EAJFA,OACAW,EAGE,EAHFA,aACAC,EAEE,EAFFA,aACAC,EACE,EADFA,aAEA,OACI,0BAAMC,SAAUD,GACZ,yBAAKZ,UAAU,eACX,yBAAKA,UAAU,cACX,2BAAOc,QAAQ,UAAf,UACA,2BACAC,KAAK,OACLf,UAAU,eACVH,GAAG,SACHmB,KAAK,SACLC,YAAY,WACZC,MAAOpB,EACPqB,SAAUT,KAGd,yBAAKV,UAAU,cACX,2BAAOc,QAAQ,UAAf,UACA,2BACAC,KAAK,SACLf,UAAU,eACVH,GAAG,SACHmB,KAAK,SACLC,YAAY,UACZC,MAASnB,EACToB,SAAUR,MAIlB,4BACAI,KAAK,SAASf,UAAU,OADxB,UACqC,kBAAC,IAAD,SChClCoB,EAJD,SAAC,GAAkB,IAAjBL,EAAgB,EAAhBA,KAAMM,EAAU,EAAVA,KACtB,OAAO,yBAAKrB,UAAS,sBAAiBe,IAASM,I,sBCuGhCC,MAnGf,WAEE,IAAMC,EAAkB,CACtB,CAAC1B,GAAI2B,MAAQ1B,OAAS,OAAQC,OAAS,KACvC,CAACF,GAAI2B,MAAQ1B,OAAS,cAAeC,OAAS,KAC9C,CAACF,GAAI2B,MAAQ1B,OAAS,mBAAoBC,OAAS,MALxC,EAUmB0B,mBAASF,GAV5B,mBAUNnB,EAVM,KAUIsB,EAVJ,OAYeD,mBAAS,IAZxB,mBAYN3B,EAZM,KAYE6B,EAZF,OAceF,mBAAS,IAdxB,mBAcN1B,EAdM,KAcE6B,EAdF,OAgBaH,mBAAS,CAACI,MAAK,IAhB5B,mBAgBNC,EAhBM,KAgBCC,EAhBD,KA0BPC,EAAc,SAAC,GAAkB,IAAjBjB,EAAgB,EAAhBA,KAAMM,EAAU,EAAVA,KAC1BU,EAAS,CAACF,MAAK,EAAMd,OAAMM,SAC3BY,YAAW,WACTF,EAAS,CAACF,MAAO,MACjB,MAqCJ,OACE,oCACIC,EAAMD,MAAQ,kBAAC,EAAD,CAAOd,KAAMe,EAAMf,KAAMM,KAAMS,EAAMT,OACrD,iDACA,0BAAMrB,UAAU,OACd,kBAAC,EAAD,CACEF,OAAUA,EACVC,OAAUA,EACVY,aArDa,SAAAuB,GACnBN,EAAUM,EAAEC,OAAOjB,QAqDbR,aAzDa,SAAAwB,GACnBP,EAAUO,EAAEC,OAAOjB,QAyDbN,aA7Ca,SAAAsB,GAEnB,GADAA,EAAEE,iBACW,KAAVtC,GAAgBC,EAAO,EAAE,CAC1BiC,EAAY,CAACjB,KAAK,UAAWM,KAAK,eAClC,IAAMgB,EAAgB,CAACxC,GAAK2B,MAAQ1B,SAAQC,UAC5C2B,EAAY,GAAD,mBAAKtB,GAAL,CAAciC,KACzBV,EAAU,IACVC,EAAU,SAGVI,EAAY,CACVjB,KAAO,SACPM,KAAI,oFAmCJ,kBAAC,EAAD,CACEjB,SAAYA,EACZR,aAzBa,SAAAC,GACnB,IAAIyC,EAAelC,EAASmC,QAAO,SAAAC,GAAI,OAAIA,EAAK3C,KAAOA,KACvD6B,EAAYY,GACZN,EAAY,CAACjB,KAAK,SAAUM,KAAK,kBAuB3B1B,WApBW,SAAAE,GACjB4C,QAAQC,IAAR,0BAA+B7C,KAoBzBQ,WAjCW,WACjBqB,EAAY,IACZM,EAAY,CAACjB,KAAK,SAAUM,KAAK,sBACjCoB,QAAQC,IAAI,uBAiCV,gDACqB,IACnB,0BAAM1C,UAAU,SAAhB,IAEGI,EAASuC,QAAO,SAACC,EAAKC,GACrB,OAAOD,EAAOE,SAASD,EAAK9C,UAC3B,OCvFOgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.76e0bc24.chunk.js","sourcesContent":["import React from 'react'\r\nimport {MdEdit, MdDelete} from 'react-icons/md'\r\nconst ExpenseItem = ({expense, handleEdit, handleDelete}) => {\r\n    const {id, charge, amount} = expense\r\n    return (\r\n        <li className=\"item\">\r\n            <div className=\"info\">\r\n               <span className=\"expense\">{charge}</span>\r\n               <span className=\"amount\">${amount}</span>\r\n            </div>\r\n            <div>\r\n                <button className=\"edit-btn\" aria-label=\"edit button\" onClick={()=>handleEdit(id)}><MdEdit/></button>\r\n                <button className=\"clear-btn\" aria-label=\"delete button\" onClick={()=>handleDelete(id)}><MdDelete/></button>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ExpenseItem\r\n","import React from 'react'\r\nimport Item from './ExpenseItem'\r\nimport {MdDelete} from 'react-icons/md'\r\nconst ExpenseList = ({expenses, handleEdit,handleDelete, clearItems}) => {\r\n    return (\r\n        <>\r\n         <ul className=\"list\">\r\n            {expenses.map(expense =>{\r\n                return <Item key={expense.id} expense={expense} handleEdit={handleEdit} handleDelete = {handleDelete} />\r\n            })}\r\n         </ul>\r\n         {\r\n             expenses.length > 0 &&(\r\n                 <button className=\"btn\" onClick = {clearItems} >\r\n                     clear expenses\r\n                     <MdDelete className=\"btn-icon\"/>\r\n                 </button>\r\n             )\r\n         }   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default ExpenseList\r\n","import React from 'react'\r\nimport {MdSend} from 'react-icons/md'\r\nconst ExpenseForm = ({\r\n    charge,\r\n    amount,\r\n    handleCharge,\r\n    handleAmount,\r\n    handleSubmit\r\n}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"form-center\">\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"charge\">charge</label>\r\n                    <input \r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    id=\"charge\"\r\n                    name=\"charge\"\r\n                    placeholder=\"eg. rent\"\r\n                    value={charge}\r\n                    onChange={handleCharge}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"amount\">amount</label>\r\n                    <input \r\n                    type=\"number\"\r\n                    className=\"form-control\"\r\n                    id=\"amount\"\r\n                    name=\"amount\"\r\n                    placeholder=\"eg. 100\"\r\n                    value = {amount}\r\n                    onChange={handleAmount}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <button \r\n            type=\"submit\" className=\"btn\">Submit <MdSend/></button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ExpenseForm\r\n","import React from 'react'\r\n\r\nconst Alert = ({type, text}) => {\r\nreturn <div className={`alert alert-${type}`}>{text}</div>\r\n}\r\n\r\nexport default Alert\r\n","import React, {useState} from 'react';\nimport ExpenseList from './componentes/ExpenseList'\nimport ExpenseForm from './componentes/ExpenseForm'\nimport Alert from './componentes/Alert'\nimport uuid from 'uuid/v4'\nimport './App.css';\n\nfunction App() {\n\n  const initialExpenses = [\n    {id: uuid(), charge : 'rent', amount : 200},\n    {id: uuid(), charge : 'car Payment', amount : 400},\n    {id: uuid(), charge : 'credit cart bill', amount : 1000}\n  ]\n  \n  // ***** state values ******\n  // All expenses, add expenses\n  const [expenses, setExpenses] = useState(initialExpenses)\n  //single expense\n  const [charge, setCharge] = useState(\"\")\n  // single amount\n  const [amount, setAmount] = useState(\"\")\n  // Alert\n  const [alert, setAlert] = useState({show:false})\n\n  // **** functionality\n  const handleCharge = e => {\n    setCharge(e.target.value)\n  }\n  const handleAmount = e => {\n    setAmount(e.target.value)\n  }\n  // handleAlert\n  const handleAlert = ({type, text}) => {\n    setAlert({show:true, type, text})\n    setTimeout(()=>{\n      setAlert({show : false})\n    },3000)\n  }\n  const handleSubmit = e =>{\n    e.preventDefault()\n    if(charge !=='' && amount>0){\n      handleAlert({type:\"success\", text:\"Item added\"})\n      const singleExpense = {id : uuid(), charge, amount}\n      setExpenses([...expenses,singleExpense])\n      setCharge(\"\")\n      setAmount(\"\")\n    }else{\n      // handle alert called\n      handleAlert({\n        type : \"danger\",\n        text : `charge can't be empty value and amount value has must to be bigger than zero`\n      })\n    }\n  }\n\n  // clear all items\n  const clearItems = () => {\n    setExpenses([])\n    handleAlert({type:\"danger\", text:\"All items deleted\"})\n    console.log('clear all items')\n  }\n  // handle delete\n  const handleDelete = id => {\n    let tempExpenses = expenses.filter(item => item.id !== id)\n    setExpenses(tempExpenses)\n    handleAlert({type:\"danger\", text:\"item deleted\"})\n  }\n  // handle edit\n  const handleEdit = id => {\n    console.log(`item Edited id: ${id}`)\n  }\n\n  \n  return (\n    <>\n      { alert.show && <Alert type={alert.type} text={alert.text} /> }\n      <h1>Budget Calculator</h1>\n      <main className=\"App\">\n        <ExpenseForm\n          charge = {charge}\n          amount = {amount}\n          handleAmount = {handleAmount}\n          handleCharge = {handleCharge}\n          handleSubmit = {handleSubmit}\n        />\n        <ExpenseList \n          expenses = {expenses}\n          handleDelete = {handleDelete}\n          handleEdit = {handleEdit}\n          clearItems = {clearItems} \n        />\n      </main>\n      <h1>\n        total spending : { \" \" }\n        <span className=\"total\">\n          $\n          {expenses.reduce((acc, curr)=>{\n            return acc += parseInt(curr.amount)\n          }, 0)}\n        </span>\n      </h1>      \n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}